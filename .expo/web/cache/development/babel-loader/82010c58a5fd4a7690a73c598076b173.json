{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/kenta/Documents/ugoing_matt/ugoing/src/components/AutocompleteSearch.js\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { GlobalStyles, GlobalColors } from \"../styles/GlobalStyles\";\nimport { useDebounce } from \"../hooks/useDebounce\";\nvar GOOGLE_API_KEY = \"AIzaSyAYMwjUPXCoPloFIfuWhLDRWVmKb2G8PwM\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\n\nvar AutocompleteSearch = function AutocompleteSearch(props) {\n  var onChangeOutputText = props.onChangeOutputText,\n      value = props.value;\n\n  var _useState = useState({\n    term: \"\",\n    fetchPredictions: false\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      search = _useState2[0],\n      setSearch = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showPredictions = _useState4[0],\n      setShowPredictions = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      predictions = _useState6[0],\n      setPredictions = _useState6[1];\n\n  var _useState7 = useState({\n    width: 0,\n    height: 0\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      inputSize = _useState8[0],\n      setInputSize = _useState8[1];\n\n  var _useState9 = useState(false),\n      _useState10 = _slicedToArray(_useState9, 2),\n      acLoaded = _useState10[0],\n      setACLoaded = _useState10[1];\n\n  var _useState11 = useState(null),\n      _useState12 = _slicedToArray(_useState11, 2),\n      acService = _useState12[0],\n      setACService = _useState12[1];\n\n  var loader = new Loader({\n    apiKey: GOOGLE_API_KEY,\n    version: \"weekly\",\n    libraries: [\"places\"]\n  });\n  useEffect(function () {\n    setSearch({\n      term: value\n    });\n    loader.load().then(function () {\n      setACService(new google.maps.places.AutocompleteService());\n      setACLoaded(true);\n    });\n  }, []);\n\n  function setSuggestions(data, status) {\n    if (status != google.maps.places.PlacesServiceStatus.OK || !data) {\n      alert(status);\n      return;\n    }\n\n    setPredictions(data);\n    setShowPredictions(true);\n  }\n\n  var _onChangeText = function onChangeText() {\n    return _regeneratorRuntime.async(function onChangeText$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(search.term.trim() === \"\")) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            if (search.fetchPredictions) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            acService.getQueryPredictions({\n              input: search.term\n            }, setSuggestions);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useDebounce(_onChangeText, 1000, [search.term]);\n\n  var _renderPredictions = function _renderPredictions() {\n    var calculatedStyle = {\n      width: inputSize.width\n    };\n    return React.createElement(FlatList, {\n      data: predictions,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item,\n            index = _ref.index;\n        return React.createElement(TouchableOpacity, {\n          style: styles.predictionRow,\n          onPress: function onPress() {\n            console.log(item);\n            onChangeOutputText(item.description);\n            setSearch({\n              term: item.description,\n              fetchPredictions: false\n            });\n            setShowPredictions(function (showPredictions) {\n              return false;\n            });\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }\n        }, React.createElement(Text, {\n          numberOfLines: 1,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }\n        }, item.description));\n      },\n      keyExtractor: function keyExtractor(item) {\n        return item.place_id;\n      },\n      keyboardShouldPersistTaps: \"handled\",\n      style: [styles.predictionsContainer, calculatedStyle],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    });\n  };\n\n  return React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, React.createElement(TextInput, {\n    style: GlobalStyles.textInput,\n    placeholder: \"Search for location\",\n    value: search.term,\n    onChangeText: function onChangeText(text) {\n      setSearch({\n        term: text,\n        fetchPredictions: true\n      });\n\n      _onChangeText();\n\n      onChangeOutputText(text);\n    },\n    nativeID: \"autocomplete\",\n    returnKeyType: \"search\",\n    onLayout: function onLayout(event) {\n      var _event$nativeEvent$la = event.nativeEvent.layout,\n          height = _event$nativeEvent$la.height,\n          width = _event$nativeEvent$la.width;\n      setInputSize({\n        height: height,\n        width: width\n      });\n    },\n    selectTextOnFocus: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }), showPredictions && _renderPredictions());\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    justifyContent: \"center\"\n  },\n  inputStyle: {\n    paddingVertical: 16,\n    paddingHorizontal: 16,\n    backgroundColor: \"#cfcfcf\",\n    borderRadius: 20,\n    color: \"black\",\n    fontSize: 16\n  },\n  predictionsContainer: {\n    backgroundColor: \"white\",\n    padding: 10,\n    borderBottomLeftRadius: 10,\n    borderBottomRightRadius: 10,\n    marginHorizontal: 15\n  },\n  predictionRow: {\n    paddingBottom: 5,\n    marginBottom: 5,\n    borderBottomColor: GlobalColors.veryLightGrey,\n    borderBottomWidth: 2\n  }\n});\nexport default AutocompleteSearch;","map":{"version":3,"sources":["/Users/kenta/Documents/ugoing_matt/ugoing/src/components/AutocompleteSearch.js"],"names":["React","useState","useEffect","GlobalStyles","GlobalColors","useDebounce","GOOGLE_API_KEY","Loader","AutocompleteSearch","props","onChangeOutputText","value","term","fetchPredictions","search","setSearch","showPredictions","setShowPredictions","predictions","setPredictions","width","height","inputSize","setInputSize","acLoaded","setACLoaded","acService","setACService","loader","apiKey","version","libraries","load","then","google","maps","places","AutocompleteService","setSuggestions","data","status","PlacesServiceStatus","OK","alert","onChangeText","trim","getQueryPredictions","input","_renderPredictions","calculatedStyle","item","index","styles","predictionRow","console","log","description","place_id","predictionsContainer","textInput","text","event","nativeEvent","layout","StyleSheet","create","container","justifyContent","inputStyle","paddingVertical","paddingHorizontal","backgroundColor","borderRadius","color","fontSize","padding","borderBottomLeftRadius","borderBottomRightRadius","marginHorizontal","paddingBottom","marginBottom","borderBottomColor","veryLightGrey","borderBottomWidth"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    StyleSheet,\n    View,\n    TextInput,\n    FlatList,\n    TouchableOpacity,\n    Text,\n} from \"react-native\";\nimport { GlobalStyles, GlobalColors } from \"../styles/GlobalStyles\";\nimport { useDebounce } from \"../hooks/useDebounce\";\n\nconst GOOGLE_API_KEY = \"AIzaSyAYMwjUPXCoPloFIfuWhLDRWVmKb2G8PwM\";\nimport { Loader } from \"@googlemaps/js-api-loader\";\n\nconst AutocompleteSearch = (props) => {\n    const { onChangeOutputText, value } = props;\n    const [search, setSearch] = useState({ term: \"\", fetchPredictions: false });\n    const [showPredictions, setShowPredictions] = useState(false);\n    const [predictions, setPredictions] = useState([]);\n    const [inputSize, setInputSize] = useState({ width: 0, height: 0 });\n\n    const [acLoaded, setACLoaded] = useState(false);\n    const [acService, setACService] = useState(null);\n\n    const loader = new Loader({\n        apiKey: GOOGLE_API_KEY,\n        version: \"weekly\",\n        libraries: [\"places\"],\n    });\n\n    useEffect(() => {\n        setSearch({ term: value });\n        loader.load().then(() => {\n            setACService(new google.maps.places.AutocompleteService());\n            setACLoaded(true);\n        });\n    }, []);\n\n    function setSuggestions(data, status) {\n        if (status != google.maps.places.PlacesServiceStatus.OK || !data) {\n            alert(status);\n            return;\n        }\n        setPredictions(data);\n        setShowPredictions(true);\n    }\n\n    const onChangeText = async () => {\n        if (search.term.trim() === \"\") return;\n        if (!search.fetchPredictions) return;\n\n        acService.getQueryPredictions({ input: search.term }, setSuggestions);\n    };\n\n    useDebounce(onChangeText, 1000, [search.term]);\n\n    const _renderPredictions = () => {\n        const calculatedStyle = {\n            width: inputSize.width,\n        };\n        return (\n            <FlatList\n                data={predictions}\n                renderItem={({ item, index }) => {\n                    return (\n                        <TouchableOpacity\n                            style={styles.predictionRow}\n                            onPress={() => {\n                                // onPredictionTapped(\n                                //     item.place_id,\n                                //     item.description\n                                // );\n                                console.log(item);\n                                onChangeOutputText(item.description);\n                                setSearch({\n                                    term: item.description,\n                                    fetchPredictions: false,\n                                });\n                                setShowPredictions((showPredictions) => false);\n                            }}\n                        >\n                            <Text numberOfLines={1}>{item.description}</Text>\n                        </TouchableOpacity>\n                    );\n                }}\n                keyExtractor={(item) => item.place_id}\n                keyboardShouldPersistTaps=\"handled\"\n                style={[styles.predictionsContainer, calculatedStyle]}\n            />\n        );\n    };\n\n    return (\n        <View>\n            <TextInput\n                style={GlobalStyles.textInput}\n                placeholder=\"Search for location\"\n                value={search.term}\n                onChangeText={(text) => {\n                    setSearch({ term: text, fetchPredictions: true });\n                    onChangeText();\n                    onChangeOutputText(text);\n                }}\n                nativeID=\"autocomplete\"\n                returnKeyType=\"search\"\n                onLayout={(event) => {\n                    const { height, width } = event.nativeEvent.layout;\n                    setInputSize({ height, width });\n                }}\n                selectTextOnFocus={true}\n            />\n\n            {showPredictions && _renderPredictions()}\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    container: {\n        justifyContent: \"center\",\n    },\n    inputStyle: {\n        paddingVertical: 16,\n        paddingHorizontal: 16,\n        backgroundColor: \"#cfcfcf\",\n        borderRadius: 20,\n        color: \"black\",\n        fontSize: 16,\n    },\n    predictionsContainer: {\n        backgroundColor: \"white\",\n        padding: 10,\n        borderBottomLeftRadius: 10,\n        borderBottomRightRadius: 10,\n        marginHorizontal: 15,\n    },\n    predictionRow: {\n        paddingBottom: 5,\n        marginBottom: 5,\n        borderBottomColor: GlobalColors.veryLightGrey,\n        borderBottomWidth: 2,\n    },\n});\n\nexport default AutocompleteSearch;\n"]},"metadata":{},"sourceType":"module"}