{"ast":null,"code":"import { useCallback, useEffect } from \"react\";\nexport var useDebounce = function useDebounce(fn, delay, deps) {\n  var callback = useCallback(fn, deps);\n  useEffect(function () {\n    var handler = setTimeout(function () {\n      callback();\n    }, delay);\n    return function () {\n      clearTimeout(handler);\n    };\n  }, [callback]);\n};","map":{"version":3,"sources":["/Users/kenta/Documents/ugoing_matt/ugoing/src/hooks/useDebounce.js"],"names":["useCallback","useEffect","useDebounce","fn","delay","deps","callback","handler","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AAOA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAKC,KAAL,EAAYC,IAAZ,EAAqB;AAM5C,MAAMC,QAAQ,GAAGN,WAAW,CAACG,EAAD,EAAKE,IAAL,CAA5B;AAOAJ,EAAAA,SAAS,CAAC,YAAM;AAEZ,QAAMM,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC7BF,MAAAA,QAAQ;AACX,KAFyB,EAEvBF,KAFuB,CAA1B;AAQA,WAAO,YAAM;AACTK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACH,KAFD;AAGH,GAbQ,EAaN,CAACD,QAAD,CAbM,CAAT;AAcH,CA3BM","sourcesContent":["import { useCallback, useEffect } from \"react\";\n\n/**\n * @param { (...args: any[]) => any } fn - A callback function to use debounce effect on.\n * @param { number } delay - A number that indicates how much time it waits.\n * @param { any[] } deps - A dependency list.\n */\nexport const useDebounce = (fn, delay, deps) => {\n    /**\n     * Store the memoized version of the callback.\n     * It changes only when one of the dependencies has has changed.\n     * See official documentation at: https://reactjs.org/docs/hooks-reference.html#usecallback\n     * */\n    const callback = useCallback(fn, deps);\n\n    /**\n     * useEffect gets re-called whenever \"callback\" changes.\n     * You can add \"delay\" to the second argument array,\n     *    if you want to change \"delay\" dynamically.\n     * */\n    useEffect(() => {\n        // Call the memoized version of callback after the delay\n        const handler = setTimeout(() => {\n            callback();\n        }, delay);\n\n        /**\n         * Clear timeout when useEffect gets re-called,\n         *    in other words, when \"callback\" changes.\n         * */\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [callback]);\n};\n"]},"metadata":{},"sourceType":"module"}